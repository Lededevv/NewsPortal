"""
Django settings for NewsPaper project.

Generated by 'django-admin startproject' using Django 5.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent



LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {

        'verbose': {
            'format': '{asctime} {levelname} {pathname}:{lineno} {module}.{funcName}(): {message}',
            'style': '{',
        },
        'simple': {
            'format': '{asctime} {levelname} {message}',
            'style': '{',
        },
        'common': {
            'format': '{asctime} {levelname} {module}: {message}',
            'style': '{',
        },
        'errors': {
            'format': '{asctime} {levelname} {pathname}:{lineno} {message}\nStack Trace:\n{exc_text}',
            'style': '{',
        },
        'email_errors': {
            'format': '{asctime} {levelname} {pathname}:{lineno} {message}',
            'style': '{',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },
    'handlers': {


        # Console Handler для всех сообщений уровня DEBUG и выше
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
            'filters': ['require_debug_true'],  # Показывать только при DEBUG = True
        },

        'warning_console': {
            'level': 'WARNING',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
            'filters': ['require_debug_true'],  # Показывать только при DEBUG = True
        },

        'error_console': {
            'level': 'ERROR',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
            'filters': ['require_debug_true'],  # Показывать только при DEBUG = True
        },
        # Общий файл для сообщений INFO и выше
        'general_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'general.log',
            'formatter': 'common',
            'filters': ['require_debug_false'],  # Отправлять только при DEBUG = False
        },
        # Новый файл для сообщений ERROR и CRITICAL
        'errors_file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': 'errors.log',
            'formatter': 'errors',
            'delay': True,  # Откладывает открытие файла до первой записи
        },
        # Новый файл для сообщений уровня SECURITY
        'security_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'security.log',
            'formatter': 'common',
        },
        # Email-обработчик для сообщений ERROR и выше
        'email_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'email_errors',
            'include_html': True,  # HTML-версия письма (если включено)
            'filters': ['require_debug_false'],  # Отправлять только при DEBUG = False
        },
    },
    'loggers': {
        # Основной логгер для всего проекта
        'django': {
            'handlers': [
                'console',           # Консольный вывод для сообщений DEBUG и выше
                'warning_console',   # Консольный вывод для сообщений WARNING и выше
                'error_console',     # Консольный вывод для сообщений ERROR и CRITICAL
                'general_file',      # Общий файл для сообщений INFO и выше
            ],
            'level': 'DEBUG',
            'propagate': False,
        },
        # Логгер для запросов
        'django.request': {
            'handlers': ['errors_file', 'email_admins'],  # Сообщения ERROR и выше идут в errors.log и почтой
            'level': 'ERROR',
            'propagate': False,
        },
        # Логгер сервера
        'django.server': {
            'handlers': ['errors_file', 'email_admins'],  # Сообщения ERROR и выше идут в errors.log и почтой
            'level': 'ERROR',
            'propagate': False,
        },
        # Логгер шаблонов
        'django.template': {
            'handlers': ['errors_file'],  # Только сообщения ERROR и CRITICAL в errors.log
            'level': 'ERROR',
            'propagate': False,
        },
        # Логгер базы данных
        'django.db.backends': {
            'handlers': ['errors_file'],  # Только сообщения ERROR и CRITICAL в errors.log
            'level': 'ERROR',
            'propagate': False,
        },
        # Логгер для вопросов безопасности
        'django.security': {
            'handlers': ['security_file'],  # Только сообщения в security.log
            'level': 'INFO',
            'propagate': False,
        },
    }
}

SITE_DOMAIN = 'http://127.0.0.1:8000'
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-gd68_7b1mz649n&((8r($5(a)1wpeuq5s-ytg#8#nvu1b#%y(c'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1']
LOGIN_URL = '/accounts/login/'

ACCOUNT_LOGOUT_REDIRECT_URL= '/news/'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.flatpages',
    'news',
    'accounts',
    'django_filters',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    # ... include the providers you want to enable:
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.yandex',
     'django_apscheduler',
]

APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"
APSCHEDULER_RUN_NOW_TIMEOUT = 25  # Seconds

CELERY_BROKER_URL = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'


ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'

ADMINS = [
    ('admin', 'lavivel.84@gmail.com'),  # Имя и почта
]

EMAIL_HOST = 'smtp.yandex.ru'  # адрес сервера Яндекс-почты для всех один и тот же
EMAIL_PORT = 465  # порт smtp сервера тоже одинаковый
EMAIL_HOST_USER = 'valev.84@yandex.ru'  # ваше имя пользователя, например, если ваша почта user@yandex.ru, то сюда надо писать user, иными словами, это всё то что идёт до собаки
EMAIL_HOST_PASSWORD = 'avgiilkonecjltjs'  # пароль от почты
EMAIL_USE_SSL = True  # Яндекс использует ssl, подробнее о том, что это, почитайте в дополнительных источниках, но включать его здесь обязательно
DEFAULT_FROM_EMAIL = 'valev.84@yandex.ru'


SITE_ID = 1
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
     'allauth.account.middleware.AccountMiddleware',
     'django.middleware.locale.LocaleMiddleware',
]

ROOT_URLCONF = 'NewsPaper.urls'


LOGIN_URL = '/accounts/login'

LOGIN_REDIRECT_URL = '/news'

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.request',
            ],
        },
    },
]

WSGI_APPLICATION = 'NewsPaper.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
        'CONN_MAX_AGE': 600,
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
SOCIALACCOUNT_ADAPTER = 'news.forms.CustomSocialAccountAdapter'
ACCOUNT_FORMS = {'signup': 'news.forms.BasicSignupForm'}
# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'ru'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


LOCALE_PATH = [
    os.path.join(BASE_DIR, 'locale')
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
STATICFILES_DIRS = [
    BASE_DIR / "static"
]
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'cache_files'), # Указываем, куда будем сохранять кэшируемые файлы! Не забываем создать папку cache_files внутри папки с manage.py!
    }
}
